type User {
  _id: ID
  name: String!
  email: String!
  picture: String
  role: String!
  createdAt: String!
  title: String
  firstName: String
  lastName: String
  dateOfBirth: String
  country: String
}

type LoginResponse {
  token: String
}

type Car {
  _id: ID
  name: String!
  producer: String!
  type: String!
  year: Int!
  group: String!
  passengers: Int!
  baggages: Int!
  doors: Int!
  transmission: String!
  propulsion: String!
  incineration: Int
  airconditioning: Boolean
  ABS: Boolean
  USB: Boolean
  powerWindows: Boolean
  remoteLocking: Boolean
  Bluetooth: Boolean
  cruiseControl: Boolean
  electricCar: Boolean
}

input AddCarInput {
  name: String!
  model: String!
  year: Int!
  group: String!
}

input RegisterInput {
  email: String!
  password: String!
  passwordConfirm: String!
}

input GetCarInput {
  name: String!
  transmission: String!
}

input PersonalDataInput {
  id: ID!
  title: String
  firstName: String
  lastName: String
  dateOfBirth: String
  country: String
}

type Query {
  me: User
  cars: [Car!]!
  car(input: GetCarInput): Car!
  relatedCars(id: ID, group: String!): [Car!]
}

type Mutation {
  addCar(input: AddCarInput!): Car
  login(email: String!, password: String!): LoginResponse!
  register(input: RegisterInput!): User
  updatePersonalData(input: PersonalDataInput!): User
}
