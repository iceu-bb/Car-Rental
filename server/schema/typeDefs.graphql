type User {
  _id: ID
  name: String!
  email: String!
  picture: String
  role: String!
  createdAt: String!
  title: String
  firstName: String
  lastName: String
  dateOfBirth: String
  countryOfBirth: String
  telephoneNumber: Int
  addressLine1: String
  addressLine2: String
  city: String
  region: String
  postcode: String
  country: String
  newsletterCheck: Boolean
  emailCheck: Boolean
  smsCheck: Boolean
}

type Car {
  _id: ID
  name: String!
  producer: String!
  type: String!
  year: Int!
  pricePerDay: Int!
  group: String!
  passengers: Int!
  baggages: Int!
  doors: Int!
  transmission: String!
  propulsion: String!
  incineration: Int
  airconditioning: Boolean
  ABS: Boolean
  USB: Boolean
  powerWindows: Boolean
  remoteLocking: Boolean
  Bluetooth: Boolean
  cruiseControl: Boolean
  electricCar: Boolean
}

type Booking {
  bookingNumber: Int!
  car: ID!
  firstName: String!
  lastName: String!
  email: String!
  renterAge: String!
  telephoneNumber: Int!
  days: Int!
  startDate: String!
  returnDate: String!
  startTime: String!
  returnTime: String!
  totalDays: Int!
  airlineCode: String
  flightNumber: String
}

type LoginResponse {
  token: String
}

type BookingDateFormResponse {
  error: String
  days: Int
}

input AddCarInput {
  name: String!
  model: String!
  year: Int!
  group: String!
}

input RegisterInput {
  email: String!
  password: String!
  passwordConfirm: String!
}

input GetCarInput {
  name: String!
  transmission: String!
}

input ExtrasItem {
  name: String
  value: Int
}

input UserDataInput {
  id: ID!
  title: String
  firstName: String
  lastName: String
  dateOfBirth: String
  countryOfBirth: String
  telephoneNumber: Int
  addressLine1: String
  addressLine2: String
  city: String
  region: String
  postcode: String
  country: String
  newsletterCheck: Boolean
  emailCheck: Boolean
  smsCheck: Boolean
}

input BookingDateFormInput {
  startDay: String
  startHour: String
  returnDay: String
  returnHour: String
  renterAge: String
  days: Int
}

input CreateBookingInput {
  car: ID
  firstName: String
  lastName: String
  email: String
  telephoneNumber: Int
  bookingDate: BookingDateFormInput
  airlineCode: String
  flightNumber: String
  totalDays: Int
  extras: [ExtrasItem]
}

type Query {
  me: User
  cars: [Car!]!
  car(input: GetCarInput): Car!
  relatedCars(id: ID, group: String!): [Car!]
  checkBookingDateForm(input: BookingDateFormInput!): Int
}

type Mutation {
  addCar(input: AddCarInput!): Car
  login(email: String!, password: String!): LoginResponse!
  register(input: RegisterInput!): User
  updateUserData(input: UserDataInput!): Boolean
  updateUserPassword(
    id: ID!
    newPassword: String!
    newPasswordConfirm: String!
    currentPassword: String!
  ): Boolean
  checkBookingDateForm(input: BookingDateFormInput!): BookingDateFormResponse
  createBooking(input: CreateBookingInput!): Booking
}
